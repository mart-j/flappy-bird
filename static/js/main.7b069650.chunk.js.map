{"version":3,"sources":["assets/bird.png","components/grid/Grid.tsx","helpers/generateGrid.tsx","App.tsx","reportWebVitals.ts","index.tsx","components/grid/Grid.module.scss"],"names":["Grid","animationLoop","moveForwardBlock","fallDown","character","grid","block","tick","topBlock","className","styles","canvas","map","square","i","onAnimationEnd","e","animation","animationName","includes","classNames","JSON","stringify","hazard","src","bird","alt","width","GRID","x","y","push","getGrid","App","useState","isGameRunning","setIsGameRunning","setTick","setCharacter","setBlock","setTopBlock","useEffect","charDetect","charDetectTop","newBlock","forEach","newTopBlock","onClick","newCharcter","newTime","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.7b069650.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/bird.28936193.png\";","import React, { FC } from 'react';\nimport classNames from 'classnames';\nimport styles from './Grid.module.scss';\nimport bird from '../../assets/bird.png';\n\ninterface Props {\n  grid: { x: number; y: number }[];\n  character: { x: number; y: number };\n  tick: { x: number; y: number };\n  block: { x: number; y: number }[];\n  topBlock: { x: number; y: number }[];\n  fallDown: () => void;\n  moveForwardBlock: () => void;\n  animationLoop: () => void;\n}\n\nconst Grid: FC<Props> = ({\n  animationLoop,\n  moveForwardBlock,\n  fallDown,\n  character,\n  grid,\n  block,\n  tick,\n  topBlock,\n}) => {\n  const checkWhitchAnimationEnded = (animation: string) => {\n    if (animation.includes('character')) {\n      fallDown();\n    }\n    if (animation.includes('tick')) {\n      animationLoop();\n      moveForwardBlock();\n    }\n  };\n  return (\n    <div className={styles.canvas}>\n      {grid.map((square, i) => {\n        return (\n          <div\n            onAnimationEnd={(e) => {\n              checkWhitchAnimationEnded(e.animationName);\n            }}\n            className={classNames(\n              styles.square,\n              JSON.stringify(square) === JSON.stringify(character) &&\n                styles.character,\n              JSON.stringify(block).includes(JSON.stringify(square)) &&\n                styles.block,\n              JSON.stringify(topBlock).includes(JSON.stringify(square)) &&\n                styles.block,\n              JSON.stringify(square) === JSON.stringify(tick) && styles.tick,\n              JSON.stringify(block[0]).includes(JSON.stringify(square)) &&\n                styles.hazard,\n            )}\n            key={`${i}`}\n          >\n            {JSON.stringify(square) === JSON.stringify(character) && (\n              <img src={bird} alt=\"bird\" width=\"60\" />\n            )}\n          </div>\n        );\n      })}\n    </div>\n  );\n};\nexport default Grid;\n","export const GRID: { x: number; y: number }[] = [];\nconst getGrid = () => {\n  for (let x = 0; x < 12; x++) {\n    for (let y = 0; y < 12; y++) {\n      GRID.push({ x, y });\n    }\n  }\n};\ngetGrid();\n","/* eslint-disable no-param-reassign */\nimport React, { useEffect, useState } from 'react';\nimport Grid from './components/grid/Grid';\nimport { GRID } from './helpers/generateGrid';\n\nconst App = () => {\n  const [isGameRunning, setIsGameRunning] = useState(false);\n  const [tick, setTick] = useState({ x: 0, y: 0 });\n  const [grid, setGrid] = useState(GRID);\n  const [character, setCharacter] = useState({ x: 6, y: 2 });\n  const [block, setBlock] = useState([\n    { x: 7, y: 10 },\n    { x: 8, y: 10 },\n    { x: 9, y: 10 },\n    { x: 10, y: 10 },\n    { x: 11, y: 10 },\n  ]);\n  const [topBlock, setTopBlock] = useState([\n    { x: 0, y: 10 },\n    { x: 1, y: 10 },\n    { x: 2, y: 10 },\n    { x: 3, y: 10 },\n  ]);\n\n  useEffect(() => {\n    // need to add crash detection for top pipe\n    const charDetect = { ...character };\n    const charDetectTop = { ...character };\n    charDetectTop.x += 1;\n    charDetect.y += 1;\n    if (\n      JSON.stringify(block).includes(JSON.stringify(charDetect)) ||\n      JSON.stringify(block).includes(JSON.stringify(charDetectTop))\n    ) {\n      setIsGameRunning(false);\n    }\n  }, [tick]);\n  useEffect(() => {\n    const newBlock = [...block];\n    if (block[0].y < 0) {\n      newBlock.forEach((square) => {\n        square.y = 12; // can be added random number higher than  12\n        setBlock(newBlock);\n      });\n      const newTopBlock = [...topBlock];\n      if (topBlock[0].y < 0) {\n        newTopBlock.forEach((square) => {\n          square.y = 12; // can be added random number higher than  12\n          setTopBlock(newTopBlock);\n        });\n      }\n    }\n  }, [block]);\n\n  const fallDown = () => {\n    const newCharcter = { ...character };\n    newCharcter.x += 1;\n    setCharacter(newCharcter);\n  };\n\n  const jumpUp = () => {\n    const newCharcter = { ...character };\n    newCharcter.x -= 1;\n    setCharacter(newCharcter);\n  };\n\n  const moveForwardBlock = () => {\n    const newBlock = [...block];\n    newBlock.forEach((square) => {\n      square.y -= 1;\n    });\n    setBlock(newBlock);\n    const newTopBlock = [...topBlock];\n    newTopBlock.forEach((square) => {\n      square.y -= 1;\n    });\n    setTopBlock(newTopBlock);\n  };\n\n  const animationLoop = () => {\n    const newTime = { ...tick };\n    newTime.x += 1;\n    if (newTime.x > 1) {\n      newTime.x = 0;\n    }\n    setTick(newTime);\n  };\n\n  return (\n    <div onClick={jumpUp} className=\"container\">\n      {isGameRunning ? (\n        <Grid\n          topBlock={topBlock}\n          tick={tick}\n          animationLoop={animationLoop}\n          moveForwardBlock={moveForwardBlock}\n          fallDown={fallDown}\n          block={block}\n          character={character}\n          grid={grid}\n        />\n      ) : (\n        <button onClick={() => setIsGameRunning(true)}>Start game</button>\n      )}\n    </div>\n  );\n};\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"canvas\":\"Grid_canvas__2vZnH\",\"square\":\"Grid_square__2EuB8\",\"block\":\"Grid_block__3iHo1\",\"tick\":\"Grid_tick__3M2On\",\"character\":\"Grid_character__iHqqN\",\"hazard\":\"Grid_hazard__3nJ32\"};"],"sourceRoot":""}